Q. Difference between library and Framework ?
Ans- Library: It provides specific functionality that can be called upon when needed.

Framework: It includes libraries, tools, guidelines and best practices to structure the development process.

Q. What is React JS ?
Ans- React is a free and open-source front-end JavaScript library for building user interfaces based on components
React is a JavaScript library created for building fast and interactive user interfaces for web and mobile applications.

Q. Problems with JS ?
Ans-
React has a simpler mental model
JS is cumbersome
JS don't provide Reusable Components
JS is Imperative where developer need to define how" to do things step-by-step

Q. Features of react 
Ans- No need to worry about querying and updating DOM
React creates a web page with small and reusable components
React will take care of creating and updating DOM elements
React is declarative where developer describe what the UI should look like for a given state.

Q. Explain "import React from 'react'" ?
Ans- This line imports the core React library, which is necessary to use JSX syntax and create React components.

Q. Explain "import ReactDOM from 'react-dom/client'"?
Ans- This line imports the ReactDOM library specifically for creating and managing the DOM nodes.

Q. Explain "ReactDOM.createRoot(document.getElementById('root')).render"?
Ans- ) ReactDOM.createRoot: This method creates a root React node that can manage the rendering of React components.
) document.getElementById('root'): This selects the HTML element with the id of root where the React app will be mounted.
) render: This method is called to render the specified React elements into the root node.

Q. Explain "<React.StrictMode>"?
Ans- ) React.StrictMode: A wrapper component that helps in identifying potential problems in the application. It does not render any UI itself but activates additional checks and warnings for its descendants.

Q. What is Virtual DOM or ReactDOM ?
Ans- ) React creates a in-memory structure called the virtual DOM
) It's a lightweight representation where each node stands for a component and it's attributes.

) NOTE: React uses a DIFFING algorithm to compare the new virtual DOM tree with the previous one. 

Q. What is Reconciliation Process ?
Ans- ) When component data changes, React updates the virtual DOM's state to mirror these changes
) React then compares the current and previous versions of the virtual DOM
) It identifies the specific nodes that need updating
) Only these nodes are updated in the real browser DOM, making it efficient.

Q. what is components ?
Ans- Components are the building blocks of the user interface. They allow developers to break down the UI into reusable, independent pieces
Components can be either class components or functional components
1) Functional component
> These are simple JavaScript functions that return JSX (JavaScript XML), which describes what the UI should look like. They can accept props as an argument and return React elements
> React Hooks can be used in functional components to handle state and lifecycle methods, making them more powerful and flexible.
2) Class component
> React Hooks can be used in functional components to handle state and lifecycle methods, making them more powerful and flexible.
> )Class components were the only way to use state and lifecycle methods before Hooks were introduced in React 16.8.)

Q. What is State ?
Ans- ) State is a special object that holds data that may change over the component's lifetime.
) Functional components use the useState Hook to manage state, while class components use this.state and this.setState.

Q. What is Lifecycle Method 
Ans- ) Lifecycle methods are special methods in class components that allow you to run code at specific points in a component's lifecycle, such as when it mounts, updates, or unmounts
) With Hooks, functional components can achieve similar behavior using useEffect.

Q. What is JSX ?
Ans- ) It determines how the UI will look wherever the component is used
) JSX get converted to regular JS
) Babeljs.io/repel is a JS compiler that transforms JSX into plain JavaScript. Babel processes your code and converts the JSX syntax into React.createElement calls.

Q. What is Fragments ?
Ans- ) Allows grouping of multiple elements without extra DOM nodes
) Return multiple elements without a wrapping parent which also provides cleaner DOM
) Two syntax 
a) <React.Fragment>....</React.Fragment>
b) <>...</>

Q. What is props and ways of passing data to props ?
Ans- ) Props (short for properties) are read-only attributes(immutable) used to pass data and event handlers from a parent component to a child component.
) Examples of using Props
a) Passing Multiple Props
b) Passing Function as Props
c) Destructuring Props 

Q. Passing Components as children ?
Ans- ) In React, passing components as children is a common pattern that allows you to compose components in a flexible and reusable way. Here’s an example to illustrate how you can pass components as children and manage them within the parent component.
) Accessed with props.children
) Enhances Reusability, Composition, Flexibility

Q. Handling events ?
Ans- React provides a way to handle user interactions like clicks, form submissions, key presses, and more using event handlers
) React events use camelCase. Eg.onClick
) Uses Synthetic events, not direct browser events
) Use onChange for controlled form inputs

Q. Passing Functions via props ?
Ans- This allows a parent component to pass a function down to a child component, which can then call the function to trigger an action or update the state in the parent
) Enables upward communication from child to parent
) Commonly used for event Handling
) Parent defines a function, child invokes it

) ----------------------------------------------HOOKS-------------------------------------

Q. What is useState()?
Ans- useState is a hook that lets you add state to functional components. It returns an array with two elements: the current state value and a function to update that state.

Eg- const [state, setState] = useState(initialState);
)state is the current state value.
)setState is the function that lets you update the state.
)initialState is the initial value of the state.

Q. What is useRef ?
Ans- It allows you to create a reference for a DOM element which persist across renders without causing a re-render when it changes.

Example) 
function MyComponent() {
  const myElementRef = useRef(null);

  return <div ref={myElementRef}>Hello, World!</div>;
}

Q. what is useContext() ?
Ans- The useContext hook is a feature in React that allows functional components to access and use the value from a context. Context provides a way to pass data through the component tree without having to pass props down manually at every level.

) First, you create a context using the createContext function from React
Example) const MyContext = createContext();
) You then use the Provider component of the context to supply the value to its descendants
) In a descendant component, you can use the useContext hook to access the context value
Example) 
 function MyComponent() {
  const value = useContext(MyContext);

  return <div>{value}</div>;
}

Q. What is useReducer() ?
Ans- The useReducer hook is an alternative to useState for managing state in a component. It's particularly useful when you have complex state logic that involves multiple sub-values or when the next state depends on the previous one. It is similar to the concept of reducers in Redux.
)) const [state, dispatch] = useReducer(reducer, initialState);

reducer: A function that determines changes to an application's state. It uses the state and action to compute the new state.

Q. What is useEffect() ?
Ans- )In function-based components, useEffect handles side effects like data fetching, event listeners and timers.
)useEffect runs automatically after every render by default to avoid that need to specify an empty array
)By providing a dependency array, useEffect will only run when specified variables change. An empty array means the effect runs once
) Multiple useEffect hooks can be used in a single component for organizing different side effects separately
) Returning a function from useEffect, helps to cancel requests for event listeners, canceling network requests, or clearing timeouts/intervals.

Q. What is useCallback() ?
Ans- ) The useCallback hook in React is used to memoize callback functions to prevent unnecessary re-renders. This can be particularly useful when passing functions to optimized child components that rely on reference equality to prevent re-renders.
) Recreates the function only when specific dependencies array change
Eg.) const memoizedCallback = useCallback(() => {
  // Your callback logic here
}, [dependencies]);

Q. What is useMemo() ?
Ans- ) Expensive Computations: useMemo caches the result of expensive calculations to avoid re-render
) Derived Data: It only re-computes the memoized value when one of the dependencies array changed.
) Optimizing Performance: Use useMemo to optimize the performance of your components by avoiding unnecessary computations and re-renders.
) Comparison with useCallback: While useCallback memoizes functions, useMemo memoizes values or results of functions.

Eg.) const memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);

----------------------------------------------REACT-ROUTER-------------------------------------

Q. What is React Router ?
Ans- React Router is a powerful library for handling navigation and routing in React applications. It allows you to define routes in your app and navigate between different components based on the URL. 
Installation: Use npm install react-router-dom

Q. What is BroweserRouter ?
Ans- Introduced in v5, BrowserRouter is the standard router component that uses the HTML5 history API to keep your UI in sync with the URL
Ex)  <BrowserRouter>
      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/about" element={<About />} />
      </Routes>
    </BrowserRouter>

Q. What is RouterProvider ?
Ans- Introduced in v6, It’s a more powerful and flexible way to configure your router. Instead of wrapping your routes directly in BrowserRouter, you configure your routes separately and pass them to RouterProvider as prop (createBrowserRouter)
) createBrowserRouter: helps creating the mapping for router provider.

Ex) const router = createBrowserRouter([
  {
    path: '/',
    element: <Home />,
    children : [
      path: '/',
      element: </About>
    ]
  },
]);

function App() {
  return <RouterProvider router={router} />;

Q. Layout routes
Ans- 1. Layout Routes help us to use shared elements
2. Outlet component is used to render the children at the nested routes

Q. Data fetching using loader ?
Ans- 1. Loader method can be used to load data before a particular route is executed.
2. The loader method must return the data that is loaded or promise.
3. Data is available in component and all the child components.
4. useLoaderData hook can be used to get the fetched data.
5. Loading state can also be used. 

Q. What is action in react router ?
Ans- 1. Actions provide a way to handle form submissions and other user actions before the route changes
2. Custom Form component need to be used along with name attribute for all inputs
3. Action function will get an data object. To generate correct request object method=“post” attribute should be used.
4. Data.request.formData() method can be used to get form data Object.
5. Object.fromEntries(formData) can be used to get actual input data.
6. redirect() response can be returned for navigation after submission.

----------------------------------------------REDUX----------------------------------------------



-------------------------------------------------------------------------------------------------
virtual DOM and actual DOM
2.Features of React
3.JSX
4.can our browser directly understand JSX  => No, browsers can't understand JSX code. You need a transpiler to convert your JSX to regular Javascript that browsers can understand. The most widely used transpiler right now is Babel.
5.webpack
6.Lifecycle component in react
7.unmount
8.refs and props
9.control and uncontrol component
10.High order function
11.state and props
12.router
13.server side rendering